{"version":3,"sources":["webpack:///./src/pages/books.js"],"names":["query","BooksPage","data","allBooks","allMarkdownRemark","edges","tags","distinct","includes","unshift","defaultOption","console","log","useState","filteredData","filter","state","setState","posts","className","style","charSet","class","src","Essay","alt","display","justifyContent","marginBottom","border","padding","options","onChange","event","value","post","node","frontmatter","tag","toLowerCase","placeholder","map","edge","key","path","color","fontSize","date","to","title","marginTop","excerpt"],"mappings":"mQA6FaA,G,UAAK,cAmBHC,UAvGG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEVC,GADUD,EAAKE,kBAAdC,MACSH,EAAKE,kBAAkBC,OAEjCC,EAAOJ,EAAKE,kBAAkBG,SAChCD,EAAKE,SAAS,QAChBF,EAAKG,QAAQ,OAEf,IAAMC,EAAgBJ,EAAK,GAC3BK,QAAQC,IAAIN,GATc,MAWAO,mBAAS,CACjCC,aAAc,GACdC,OAAQL,IAFHM,EAXmB,KAWZC,EAXY,KAkClBH,EAAyBE,EAAzBF,aAAcC,EAAWC,EAAXD,OAEhBG,EADmBJ,GAAgBC,IAAWL,EACnBI,EAAeX,EAGhD,OACI,6BAASgB,UAAU,UAAUC,MAAO,CAAC,WAAc,SACnD,kBAAC,IAAD,KACI,0BAAMC,QAAQ,UACd,gDAEJ,yBAAKF,UAAU,aACf,yBAAKA,UAAU,WACX,yBAAKA,UAAU,uBAAf,KACA,yBAAKA,UAAU,0BACf,kBAAC,IAAD,MACA,yBAAKG,MAAM,gCACT,4BAAQH,UAAU,oCACd,yBAAKG,MAAM,YAAYC,IAAKC,IAAOC,IAAI,SAG7C,6BACA,wBAAIN,UAAU,SAAd,kBACA,6BACA,yBAAKC,MAAO,CAACM,QAAS,OAAQC,eAAgB,kBAC9C,uBAAGP,MAAO,CAACQ,aAAc,WAAW,4BAAQT,UAAU,iBAAlB,qBACpC,kBAAC,IAAD,CAAUC,MAAO,CAACS,OAAO,OAAQC,QAAS,2BAA4BC,QAASzB,EAAM0B,SA5ClE,SAAAC,GACzBtB,QAAQC,IAAIqB,EAAMC,OAClB,IAAMnB,EAASkB,EAAMC,MAIfpB,GAHYZ,EAAVG,OACMH,EAAKE,kBAAkBC,OAAS,IAEnBU,QAAO,SAAAoB,GAEhC,OADgBA,EAAKC,KAAKC,YAAlBC,IAED9B,SAASO,EAAOwB,mBAGzB5B,QAAQC,IAAIE,GACZG,EAAS,CACPF,SACAD,kBA6BuHoB,MAAOxB,EAAe8B,YAAY,sBAGlJtB,EAAMuB,KAAI,SAAAC,GAAS,IACXL,EAAeK,EAAKN,KAApBC,YACP,OACE,yBAAKlB,UAAU,MAAMwB,IAAKN,EAAYO,KAAMxB,MAAO,CAACyB,MAAO,OAAQjB,aAAc,SAC/E,0BAAMR,MAAO,CAAC0B,SAAU,YAAaT,EAAYU,KAAjD,KADF,IACiE,6BAC/D,kBAAC,IAAD,CAAMC,GAAIX,EAAYO,MACtB,2BAAIP,EAAYY,QAEhB,uBAAG7B,MAAO,CAAC0B,SAAU,UAAWlB,aAAc,SAAUsB,UAAW,WAAYb,EAAYc,cAMvG,yBAAKhC,UAAU","file":"component---src-pages-books-js-543e573c73ba2e3f3559.js","sourcesContent":["import React, { useState } from \"react\";\nimport { graphql, Link } from 'gatsby';\nimport { Helmet } from \"react-helmet\"\nimport Header from '../components/Header';\nimport Essay from '../img/essays.svg'\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\n\nconst BooksPage = ({data}) => {\n    const {edges} = data.allMarkdownRemark;\n    const allBooks= data.allMarkdownRemark.edges;\n\n    const tags = data.allMarkdownRemark.distinct;\n    if(!tags.includes(\"all\")) {\n      tags.unshift(\"all\");\n    } \n    const defaultOption = tags[0];\n    console.log(tags);\n\n    const [state, setState] = useState({\n      filteredData: [],\n      filter: defaultOption,\n    })\n    \n    const handleFilterChange = event => {\n      console.log(event.value)\n      const filter = event.value\n      const { edges } = data\n      const posts = data.allMarkdownRemark.edges || []\n\n      const filteredData = posts.filter(post => {\n        const { tag } = post.node.frontmatter\n        return (\n          (tag.includes(filter.toLowerCase()))\n        )\n      })\n      console.log(filteredData)\n      setState({\n        filter,\n        filteredData,\n      })\n    }\n    const { filteredData, filter } = state\n    const hasSearchResults = filteredData && filter !== defaultOption\n    const posts = hasSearchResults ? filteredData : allBooks\n  \n\n    return (\n        <section className=\"section\" style={{\"paddingTop\": \"1rem\"}}>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Book Reviews</title>\n            </Helmet>\n        <div className=\"container\">\n        <div className=\"columns\">\n            <div className=\"column is-one-sixth\"> </div>\n            <div className=\"column is-three-fifths\">  \n            <Header />\n            <div class=\"level-item has-text-centered\">\n              <figure className=\"image is-128x128 is-inline-block\">\n                  <img class=\"is-square\" src={Essay} alt=\"Me\"  />\n              </figure>\n            </div>\n            <br /> \n            <h1 className=\"title\"> Book Reviews </h1>\n            <br />\n            <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n            <p style={{marginBottom: \"0.5rem\"}}><strong className=\"has-text-grey\">All Book Reviews</strong></p>\n            <Dropdown style={{border:\"none\", padding: \"1.5rem 1.5rem 1rem 1rem\"}} options={tags} onChange={handleFilterChange} value={defaultOption} placeholder=\"Select an option\" />\n            </div>\n\n              {posts.map(edge => {\n                const {frontmatter} = edge.node;\n                return (\n                  <div className=\"box\" key={frontmatter.path} style={{color: \"grey\", marginBottom: \"1rem\"}}>\n                    <span style={{fontSize: \"0.75rem\"}}>{frontmatter.date} </span> <br />\n                    <Link to={frontmatter.path}>\n                    <p>{frontmatter.title}</p>\n                    </Link>\n                    <p style={{fontSize: \"0.85rem\", marginBottom: \"0.5rem\", marginTop: \"0.1rem\"}}>{frontmatter.excerpt}</p>\n                  </div>\n                )\n            })}\n\n        </div>\n        <div className=\"column is-one-sixth\"></div>\n        </div>\n        </div>\n    </section>\n    );\n}\n\nexport const query = graphql`\n  query BookQuery {\n    allMarkdownRemark(sort: {order: DESC, fields: [frontmatter___date]}, filter: {frontmatter: {tag: {eq: \"book_review\"}}}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            excerpt\n            path\n            date\n            tag\n          }\n        }\n      }\n      distinct(field: frontmatter___tag)\n    }\n  }\n`\n\nexport default BooksPage\n"],"sourceRoot":""}